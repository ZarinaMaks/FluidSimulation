#ifndef COMPONENTLIB2D_H
#define COMPONENTLIB2D_H

////////// fluidlib //////////////////////////////////////////////////////////
// Авторы   : Баталов Семен, Зарина Максудова, Дарья Белоусова              //
// Дата     : ??.??.2020                                                    //
//////////////////////////////////////////////////////////////////////////////

#include "errlib.h"
#include "basiclib.h"

namespace fluid
{
    ////////// class SField2D ////////////////////////////////////////////////
    // Класс, описывающий двумерное скалярное поле, заданное на некоторой   //
    // области. Если точка (x, y) принадлежит области, то area(x, y)        //
    // возвращает "true", иначе "false".                                    //
    // (SField2D <=> ScalarField2D)                                         //
    //                                                                      //
    // 1) MIN_SIZE_X <= sizeX_ <= MAX_SIZE_X                                //
    // 2) MIN_SIZE_Y <= sizeY_ <= MAX_SIZE_Y                                //
    //////////////////////////////////////////////////////////////////////////
    
    class SField2D
    {
        private :
            
            Point** points_;    // Двумерный массив элементов поля
            int     sizeX_;     // Размер поля по "x"
            int     sizeY_;     // Размер поля по "y"
            
        public :
            
            ////////// Инициализация /////////////////////////////////////////
            
            // (1) Конструктор (обнуляет поля)
            SField2D();
            
            // (2) Конструктор копирования
            SField2D(const SField2D& field);
            
            // (3) Перегрузка оператора присваивания
            SField2D& operator=(const SField2D& field);
            
            // (4) Изменяет размер поля, уничтожая всю информацию
            void resize(int sizeX, int sizeY);
            
            ////////// Доступ к элементам поля ///////////////////////////////
            
            // (5) Доступ к величинам на поле
            Real& field(int x, int y);
            
            // (6) Доступ к величинам на поле (const)
            const Real& field(int x, int y) const;
            
            // (7) Доступ к области задания
            bool& area(int x, int y);
            
            // (8) Доступ к области задания (const)
            const bool& area(int x, int y) const;
            
            // (9) Проверка на выход за границы
            bool isInRange(int x, int y) const;
            
            ////////// Доступ к размерам поля ////////////////////////////////
            
            // (10) Возвращает размер по "x"
            int getSizeX() const;
            
            // (11) Возвращает размер по "y"
            int getSizeY() const;
            
            ////////// Обновление значений ///////////////////////////////////
            
            // (12) Обновляет значения величин на поле
            void resetField(Real newValue);
            
            // (13) Обновляет область задания
            void resetArea(bool newValue);
            
            // (14) Установка значений по умолчанию
            void clear();
            
            // (15) Деструктор
            ~SField2D();
    };
    
    ////////// class VField2D ////////////////////////////////////////////////
    // Класс, описывающий двумерное векторное поле, заданное на некоторой   //
    // области. Представляет объединение двух двумерных скалярных полей,    //
    // заданных на той же области.                                          //
    // (VField2D <=> VectorField2D)                                         //
    //////////////////////////////////////////////////////////////////////////
    
    class VField2D
    {
        private :
            
            SField2D componentX_;   // Компонента "x"
            SField2D componentY_;   // Компонента "y"
            
        public :
            
            ////////// Инициализация /////////////////////////////////////////
            
            // (1) Конструктор
            VField2D() = default;
            
            // (2) Конструктор копирования
            VField2D(const VField2D& field) = default;
            
            // (3) Перегрузка оператора присваивания
            VField2D& operator=(const VField2D& field) = default;
            
            // (4) Изменяет размер поля, уничтожая всю информацию
            void resize(int sizeX, int sizeY);
            
            ////////// Доступ к компонентам поля /////////////////////////////
            
            // (5) Доступ по ссылке к скалярному полю "x"
            SField2D& x();
            
            // (6) Доступ по ссылке к скалярному полю "y"
            SField2D& y();
            
            // (7) Доступ по "const" ссылке к скалярному полю "x"
            const SField2D& x() const;
            
            // (8) Доступ по "const" ссылке к скалярному полю "y"
            const SField2D& y() const;
            
            ////////// Доступ к размерам поля ////////////////////////////////
            
            // (9) Возвращает размер по "x"
            int getSizeX() const;
            
            // (10) Возвращает размер по "y"
            int getSizeY() const;
            
            // (11) Установка значений по умолчанию
            void clear();
            
            // (12) Деструктор
            ~VField2D() = default;
    };
    
    ////////// struct Values2D ///////////////////////////////////////////////
    // Структура, предназначеная для передачи значений интерполируемой      //
    // фунции в вершинах прямоугольника со сторонами DX, DY.                //
    //////////////////////////////////////////////////////////////////////////
    
    struct Values2D
    {
        public :
            
            Real fx0y0;     // Значение функции в вершине (x0, y0)
            Real fx0y1;     // Значение функции в вершине (x0, y1)
            Real fx1y0;     // Значение функции в вершине (x1, y0)
            Real fx1y1;     // Значение функции в вершине (x1, y1)
            
        public :
            
            // (1) Конструктор (обнуляет поля)
            Values2D();
            
            // (2) Конструктор копирования
            Values2D(const Values2D& values) = default;
            
            // (3) Перегрузка оператора присваивания
            Values2D& operator=(const Values2D& values) = default;
            
            // (4) Установка значений по умолчанию
            void clear();
            
            // (5) Деструктор
            ~Values2D() = default;
    };
}

#endif